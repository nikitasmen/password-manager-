#include "encryption_factory.h"
#include "aes_encryption.h"
#include "lfsr_encryption.h"

using namespace std;

unique_ptr<IEncryption> EncryptionFactory::create(const EncryptionConfigParameters& params) {
    switch (params.type) {
        case EncryptionType::AES: {
            auto aes = make_unique<AESEncryption>();
            if (!params.masterPassword.empty()) {
                aes->setMasterPassword(params.masterPassword);
            }
            return aes;
        }

        case EncryptionType::LFSR: {
            auto lfsr = make_unique<LFSREncryption>(params.lfsrTaps, params.lfsrInitState, params.salt);
            if (!params.masterPassword.empty()) {
                lfsr->setMasterPassword(params.masterPassword);
            }
            return lfsr;
        }

        // case EncryptionType::RSA: {
        //     auto rsa = make_unique<RSAEncryption>();
        //     if (!params.masterPassword.empty()) {
        //         rsa->setMasterPassword(params.masterPassword);
        //     }

        //     if (!params.publicKey.empty() && !params.privateKey.empty()) {
        //         rsa->loadKeys(params.publicKey, params.privateKey);
        //     } else {
        //         // If no keys are provided, a new pair will be generated by the constructor's logic if we add it back.
        //         // For now, let's assume key generation is handled elsewhere or we add it explicitly.
        //         // Let's re-add key generation for completeness.
        //         rsa->generateKeyPair(2048); // Explicitly generate keys if not provided.
        //     }
        //     return rsa;
        // }

        default:
            throw EncryptionError("Unsupported encryption type");
    }
}
